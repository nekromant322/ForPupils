#include <iostream> 
#include<time.h> 
#include <conio.h> 
#include <windows.h> 
#include <time.h>
#include <vector>
using namespace std;

enum eDirection { STOP = 0, LEFT, RIGHT, UP, DOWN };
struct point
{
	int x;
	int y;
};

class SnakeGame
{
private:
	eDirection dir;
	const int width = 20;
	const int height = 15;
	int score;
	bool game_over;
	point pos;
	point pos_food; //доп сделать много еды
	vector<point> tail;
	//point buf;
public:
	SnakeGame()
	{
		srand(time(NULL));
		dir = STOP;
		score = 0;
		game_over = false;
		pos.x = height / 2;
		pos.y = width / 2;
		pos_food.x = rand() % width;
		pos_food.y = rand() % height;
		tail = {};
		
	}
	void Draw()
	{
		Sleep(300);
		system("cls");
		for (int i = 0; i < width; i++)
		{
			cout << "#";
		}
		cout << endl;
		///

		for (int i = 0; i < height; i++) //height!!
		{
			for (int j = 0; j < width; j++) //width!!
			{
				bool flag = false;
				for (int k = 0; k < tail.size(); k++) //отображение хвоста
				{
					if (tail[k].x == j && tail[k].y == i)
					{
						cout << "o";
						flag = true;
						break;
					}
				}
				if (flag == true)
				{
					continue;
				}
				
				if (i == pos.y && j == pos.x)
				{
					cout << "O";
				}
				else
				{
					if (i == pos_food.y && j == pos_food.x)
					{
						cout << "%";
						continue;
					}
					if (j == 0 || j == width - 1)
					{
						cout << "#";
					}
					else
					{
						cout << " ";
					}
				}
				
			}
			cout << endl;
		}
		for (int i = 0; i < width; i++)
		{
			cout << "#";
		}
		cout << endl;
	}
	void Input() 
	{
		if (_kbhit())
		{
			char key = _getch();
			switch (key)
			{
			case 'a':
				dir = LEFT;
				break;
			case 'w':
				dir = UP;
				break;
			case 'd':
				dir = RIGHT;
				break;
			case 's':
				dir = DOWN;
				break;
			case 27:
				game_over = true;
				break;
			}



		}
	}
	void Logic()
	{

		if (tail.size() != 0)
		{
			tail.erase(tail.begin());
			tail.push_back(pos);
		}
		if (pos.x == pos_food.x && pos.y == pos_food.y)
		{
			tail.push_back(pos);
			//RandomFood();
		}
		
		
		switch (dir)
		{
		case LEFT:
			pos.x--;
			break;
		case UP:
			pos.y--; 
			break;
		case DOWN:
			pos.y++;
			break;
		case RIGHT:
			pos.x++;
			break;

		}
		
		
	}
	bool IsOver()
	{
		return game_over;
	}
};

enum Day { Sunday, Monday, Tuesday };
int main()
{
	
	srand(time(NULL));
	SnakeGame Game = SnakeGame();
	
	while (!Game.IsOver())
	{
		Game.Draw();
		Game.Input();
		Game.Logic();

	}
	return 0;
}